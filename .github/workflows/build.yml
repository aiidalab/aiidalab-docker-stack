---
name: Build and test image and upload them to ghcr.io

env:
    OWNER: ${{ github.repository_owner }}
    REGISTRY: ghcr.io
    BUILDKIT_PROGRESS: plain
    # https://github.com/docker/metadata-action?tab=readme-ov-file#environment-variables
    DOCKER_METADATA_PR_HEAD_SHA: true

on:
    # TODO: Can we define outputs here?
    workflow_call:
        inputs:
            architecture:
                description: Image architecture, e.g. amd64, arm64
                required: true
                type: string
            runsOn:
                description: GitHub Actions Runner image
                required: true
                type: string

jobs:
    build:
        runs-on: ${{ inputs.runsOn }}
        timeout-minutes: 20

        outputs:
            targets: ${{ steps.bake_metadata.outputs.targets }}
            images: ${{ steps.bake_metadata.outputs.images }}

        # Make sure we fail if any command in a piped command sequence fails
        defaults:
            run:
                shell: bash -e -o pipefail {0}

        steps:

            - name: Checkout Repo ‚ö°Ô∏è
              uses: actions/checkout@v4

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to GitHub Container Registry üîë
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Generate tags for images on ghcr.io üè∑Ô∏è
              id: tags_template
              uses: docker/metadata-action@v4
              with:
                  bake-target: __template__-meta
                  images: |
                      name=${{ env.REGISTRY }}/aiidalab/__template__
                  tags: |
                      type=sha
                      type=ref,event=pr
                      type=edge,branch=main

            - name: Generate docker-bake metadata file.
              env:
                  BAKE_TEMPLATE_FILE: ${{ steps.tags_template.outputs.bake-file }}
              run: |
                  .github/workflows/merge-bake-template-target.sh ${BAKE_TEMPLATE_FILE} \
                    | tee docker-bake-template-meta.json

            - name: Build amd64 images üèóÔ∏è
              id: build-amd64
              uses: docker/bake-action@v4
              with:
                  # Do not push the resulting images, just load them to Docker for testing
                  load: true
                  set: |
                      *.platform=linux/amd64
                  files: |
                      docker-bake.hcl
                      build.json
                      docker-bake-template-meta.json

            - name: Set output variables
              id: bake_metadata
              run: |
                  cat docker-bake-template-meta.json \
                    | jq -c '.target | [to_entries[] | {"key": (.key|split("-")[:-1] | join("-")), "value": [.value.tags[]][1]}] | from_entries' \
                    | tee bake-meta.json
                  targets=$(echo $(cat bake-meta.json | jq -c 'keys'))
                  images=$(echo $(cat bake-meta.json | jq -c '. | [to_entries[] | {"key": (.key| split("-")| join("_") |ascii_upcase + "_IMAGE"), "value": .value}] | from_entries'))
                  echo -e "targets=$targets\nimages=$images"
                  echo "targets=$targets" >> "${GITHUB_OUTPUT}"
                  echo "images=$images" >> "${GITHUB_OUTPUT}"

            - name: Create Python dev environment üì¶
              uses: ./.github/actions/create-dev-env
              with:
                  architecture: ${{ inputs.architecture }}

            - name: Run tests for full-stack image
              run: REGISTRY= pytest -m "not integration" --target full-stack
              env: ${{ fromJSON(steps.bake_metadata.outputs.images) }}

              # Here we build ARM64 images and upload both amd64 and arm64 to ghcr.io
            - name: Build images for ARM64 and upload to ghcr.io üçéüì§
              id: build-upload
              uses: docker/bake-action@v4
              with:
                  push: true
                  # Using provenance to disable default attestation so it will build only desired images:
                  # https://github.com/orgs/community/discussions/45969
                  provenance: false
                  # NOTE: linux/amd64 images will be taken from previous step
                  set: |
                      *.platform=linux/arm64,linux/amd64
                  files: |
                      docker-bake.hcl
                      build.json
                      docker-bake-template-meta.json

    test:
        needs: build
        runs-on: ${{ inputs.runsOn }}
        timeout-minutes: 20
        strategy:
            matrix:
                # NOTE: full-stack is tested during build step
                target: ["base", "lab", "base-with-services"]

        steps:

            - name: Checkout Repo ‚ö°Ô∏è
              uses: actions/checkout@v4

            - name: Login to Container Registry üîë
              uses: docker/login-action@v2
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Create Python dev environment üì¶
              uses: ./.github/actions/create-dev-env
              with:
                  architecture: ${{ inputs.architecture }}

            - name: Run tests
              # TODO: Hack with REGISTRY
              run: REGISTRY= pytest -m "not integration" --target ${{matrix.target}}
              env: ${{ fromJSON(needs.build.outputs.images) }}

    test-arm64:
        needs: build
        runs-on: ARM64
        timeout-minutes: 20
        strategy:
            matrix:
                # Only testing full-stack image to save self-hosted runner resources
                target: ["full-stack"]

        steps:

            - name: Checkout Repo ‚ö°Ô∏è
              uses: actions/checkout@v4

            - name: Login to Container Registry üîë
              uses: docker/login-action@v2
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Create Python dev environment üì¶
              uses: ./.github/actions/create-dev-env
              with:
                  architecture: ${{ inputs.architecture }}

            - name: Run tests
              run: REGISTRY= pytest -m "not integration" --target ${{matrix.target}}
              env: ${{ fromJSON(needs.build.outputs.images) }}

            - name: Run integration tests
              run: REGISTRY= pytest -m "integration" --target ${{matrix.target}}
              env: ${{ fromJSON(needs.build.outputs.images) }}


    integration-test:
        needs: build
        runs-on: ${{ inputs.runsOn }}
        timeout-minutes: 20

        steps:

            - name: Checkout Repo ‚ö°Ô∏è
              uses: actions/checkout@v4

            - name: Login to Container Registry üîë
              uses: docker/login-action@v2
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Create Python dev environment üì¶
              uses: ./.github/actions/create-dev-env
              with:
                  architecture: ${{ inputs.architecture }}

            - name: Run tests
              # TODO: Hack with REGISTRY
              run: REGISTRY= pytest -m "integration" --target full-stack
              env: ${{ fromJSON(needs.build.outputs.images) }}
