---
name: Build images upload them to ghcr.io

env:
    OWNER: ${{ github.repository_owner }}
    REGISTRY: ghcr.io

on:
    workflow_call:
        inputs:
            image:
                description: Image name
                required: false
                type: string
            architecture:
                description: Image architecture, e.g. amd64, arm64
                required: true
                type: string
            runsOn:
                description: GitHub Actions Runner image
                required: true
                type: string

jobs:
    build-upload:
        runs-on: ${{ inputs.runsOn }}
        timeout-minutes: 20

        outputs:
            build_vars: ${{ steps.build_vars.outputs.vars }}
            targets: ${{ steps.bake_metadata.outputs.targets }}
            images: ${{ steps.bake_metadata.outputs.images }}

        steps:

            - name: Checkout Repo ⚡️
              uses: actions/checkout@v4

              #- name: Set up QEMU
              #uses: docker/setup-qemu-action@v3

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Install jq
              if: inputs.architecture == 'arm64'
              run: pip install jq

            - name: Read and flatten build variables
              id: build_vars
              # Example output:
              # {"PYTHON_VERSION":"3.9.13","PGSQL_VERSION":"15","AIIDA_VERSION":"2.4.3","AIIDALAB_VERSION":"23.03.2","AIIDALAB_HOME_VERSION":"23.03.1"}
              run: |
                  vars=$(cat build.json | jq -c '[.variable | to_entries[] | {"key": .key, "value": .value.default}] | from_entries')
                  echo "vars=$vars" && echo "vars=$vars" >> "${GITHUB_OUTPUT}"

            - name: Generate tags for images on ghcr.io
              id: meta
              uses: docker/metadata-action@v5
              with:
                  bake-target: __template__-meta
                  images: |
                      name=ghcr.io/aiidalab/__template__
                  tags: |
                      type=sha
                      type=ref,event=pr

            - name: Generate docker-bake meta file.
              env:
                  BAKE_TEMPLATE_META: ${{ steps.meta.outputs.bake-file }}
              run: |
                  cat ${BAKE_TEMPLATE_META} | jq -c \
                    | .github/workflows/merge-bake-template-target.sh \
                    | tee docker-bake-template-meta.json

            - name: Build image
              id: build
              uses: docker/bake-action@v4
              with:
                  push: true
                  load: true
                  # Using provenance to disable default attestation so it will build only desired images:
                  # https://github.com/orgs/community/discussions/45969
                  provenance: false
                  files: |
                      docker-bake.hcl
                      build.json
                      docker-bake-template-meta.json

            - name: Set output variables
              id: bake_metadata
              run: |
                  cat docker-bake-template-meta.json \
                    | jq -c '.target | [to_entries[] | {"key": (.key|split("-")[:-1] | join("-")), "value": [.value.tags[]][1]}] | from_entries' \
                    | tee bake-meta.json
                  targets=$(echo $(cat bake-meta.json | jq -c 'keys'))
                  images=$(echo $(cat bake-meta.json | jq -c '. | [to_entries[] | {"key": (.key| split("-")| join("_") |ascii_upcase + "_IMAGE"), "value": .value}] | from_entries'))
                  echo -e "targets=$targets\nimages=$images"
                  echo "targets=$targets" >> "${GITHUB_OUTPUT}"
                  echo "images=$images" >> "${GITHUB_OUTPUT}"
