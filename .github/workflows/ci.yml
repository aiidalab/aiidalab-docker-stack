---
# Build and test all Docker images on every push and pull request.
#
# Builds the images with docker buildx bake and pushes them to a local Docker
# image registry, and runs the automated tests with pytest.

name: continuous-integration

on:
    push:
        branches:
            - master
        tags:
            - "*"
    pull_request:
        branches:
            - master
            - stack # remove stack before merge
            - feature/full-stack-image  # remove before merge

jobs:

    build:

        runs-on: ubuntu-latest
        timeout-minutes: 10

        outputs:
            build_vars: ${{ steps.build_vars.outputs.vars }}
            targets: ${{ steps.bake_metadata.outputs.targets }}
            images: ${{ steps.bake_metadata.outputs.images }}

        steps:

            - uses: actions/checkout@v2
            - name: Set up QEMU
              uses: docker/setup-qemu-action@v2
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2
            - name: Login to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Read build variables
              id: build_vars
              run: |
                  echo ::set-output name=vars::$(cat build.json | \
                    jq '[.variable | to_entries[] | {"key": .key, "value": .value.default}] | from_entries')
            - name: Docker meta
              id: meta
              uses: docker/metadata-action@v4
              with:
                  bake-target: __template__-meta
                  images: |
                      name=ghcr.io/aiidalab/__template__
                  tags: |
                      type=ref,event=pr
                      type=ref,event=tag
                      type=edge
            - name: Generate docker-bake meta file.
              env:
                  BAKE_TEMPLATE_META: ${{ steps.meta.outputs.bake-file }}
              run: |
                  cat ${BAKE_TEMPLATE_META} | jq -c \
                    | .github/workflows/merge-bake-template-target.sh \
                    | tee docker-bake-template-meta.json
            - name: Build images with buildx bake
              id: bake
              uses: docker/bake-action@v2.2.0
              with:
                  files: |
                      docker-bake.hcl
                      build.json
                      docker-bake-template-meta.json
                  push: true
            - name: Set output variables
              id: bake_metadata
              env:
                  BAKE_METADATA: ${{ steps.bake.outputs.metadata }}
              run: |
                  targets=$(echo "${BAKE_METADATA}"| jq -c 'keys')
                  echo "::set-output name=targets::${targets}"
                  images=$(echo "${BAKE_METADATA}"| jq -c '. as $base |[to_entries[] |{"key": (.key|ascii_upcase|sub("-"; "_"; "g") + "_IMAGE"), "value": [.value."image.name",.value."containerimage.digest"]|join("@")}] |from_entries')
                  echo "::set-output name=images::${images}"

    test:
        needs: build

        runs-on: ubuntu-latest
        timeout-minutes: 10

        steps:
            - uses: actions/checkout@v2
            - name: Login to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - uses: actions/setup-python@v4
              with:
                  python-version: '3.10'
                  cache: pip # caching pip dependencies
            - run: pip install -r tests/requirements.txt
            - name: Run tests
              env: ${{ fromJSON(needs.build.outputs.images) }}
              run: |
                  pytest -v

    release:
        # TODO after debugging: Remove ' || true'
        if: >-
            github.repository == 'aiidalab/aiidalab-docker-stack'
            && (github.ref_type == 'tag' || github.ref_name == 'master')
            || true
        needs:
            - build
            # - test # TODO: enable after debugging

        runs-on: ubuntu-latest
        timeout-minutes: 10
        strategy:
            matrix:
                target: ${{ fromJSON(needs.build.outputs.targets) }}

        steps:
            - name: Login to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Login to Docker Hub
              uses: docker/login-action@v2
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}
            - name: Docker meta
              id: meta
              uses: docker/metadata-action@v4
              env: ${{ fromJSON(needs.build.outputs.build_vars) }}
              # TODO after debugging:
              # 1. Fix registry
              # 2. Remove suffix
              # 3. Remove '|| true' from the raw tags.
              with:
                  images: ghcr.io/aiidalab/${{ matrix.target }}
                  flavor: |
                      suffix=-release
                  tags: |
                      type=edge
                      type=ref,event=tag
                      type=raw,value=aiida-${{ env.AIIDA_VERSION }},enable=${{ github.ref_type == 'tag' || true }}
                      type=raw,value=python-${{ env.PYTHON_VERSION }},enable=${{ github.ref_type == 'tag' || true}}
            - name: Determine src image tag
              id: images
              run: |
                  src=$(echo '${{ needs.build.outputs.images }}'| jq -cr '.[("${{ matrix.target }}"|ascii_upcase|sub("-"; "_"; "g")) + "_IMAGE"]')
                  echo ::set-output name=src::${src}
            - name: Push image
              uses: akhilerm/tag-push-action@v2.0.0
              with:
                  src: ${{ steps.images.outputs.src }}
                  dst: ${{ steps.meta.outputs.tags }}
