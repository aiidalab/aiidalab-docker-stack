#!/bin/bash
#
#
# ARG_OPTIONAL_BOOLEAN([build],[b],[If set, build the container image prior to starting the server.],[on])
# ARG_OPTIONAL_SINGLE([image],[i],[The name of the AiiDAlab to build (if enabled) and run.],[aiidalab-docker-stack:develop])
# ARG_OPTIONAL_SINGLE([token],[t],[The token used for authentication with AiiDAlab. (defaults to random string)])
# ARG_POSITIONAL_SINGLE([port],[Free port on the host.])
# ARG_POSITIONAL_SINGLE([home-dir],[Path to the directory on the host to be mounted as the AiiDAlab home directory. The directory will be created if it does not exist yet.])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='bith'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_build="on"
_arg_image="aiidalab-docker-stack:develop"
_arg_token=


print_help()
{
	printf '%s\n' "The general script's help msg"
	printf 'Usage: %s [-b|--(no-)build] [-i|--image <arg>] [-t|--token <arg>] [-h|--help] <port> <home-dir>\n' "$0"
	printf '\t%s\n' "<port>: Free port on the host."
	printf '\t%s\n' "<home-dir>: Path to the directory on the host to be mounted as the AiiDAlab home directory. The directory will be created if it does not exist yet."
	printf '\t%s\n' "-b, --build, --no-build: If set, build the container image prior to starting the server. (on by default)"
	printf '\t%s\n' "-i, --image: The name of the AiiDAlab to build (if enabled) and run. (default: 'aiidalab-docker-stack:develop')"
	printf '\t%s\n' "-t, --token: The token used for authentication with AiiDAlab. (defaults to random string)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-b|--no-build|--build)
				_arg_build="on"
				test "${1:0:5}" = "--no-" && _arg_build="off"
				;;
			-b*)
				_arg_build="on"
				_next="${_key##-b}"
				if test -n "$_next" -a "$_next" != "$_key"
				then
					{ begins_with_short_option "$_next" && shift && set -- "-b" "-${_next}" "$@"; } || die "The short option '$_key' can't be decomposed to ${_key:0:2} and -${_key:2}, because ${_key:0:2} doesn't accept value and '-${_key:2:1}' doesn't correspond to a short option."
				fi
				;;
			-i|--image)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_image="$2"
				shift
				;;
			--image=*)
				_arg_image="${_key##--image=}"
				;;
			-i*)
				_arg_image="${_key##-i}"
				;;
			-t|--token)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_token="$2"
				shift
				;;
			--token=*)
				_arg_token="${_key##--token=}"
				;;
			-t*)
				_arg_token="${_key##-t}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'port' and 'home-dir'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_port _arg_home_dir "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash
if [ -z "${_arg_token}" ]; then
  _arg_token=`openssl rand -hex 32`
fi

if [ "${_arg_build}" == "on" ]; then
  echo "Build the AiiDAlab image..."
  docker build -t "${_arg_image}" "$(dirname ${0})"
fi

echo "Launching the container..."
CONTAINER_ID=`docker run -d -p "${_arg_port}:8888" -e JUPYTER_TOKEN="${_arg_token}" -v "${_arg_home_dir}:/home/aiida" "${_arg_image}"`

echo "Waiting for container to start..."
docker exec --tty ${CONTAINER_ID} wait-for-services

echo "Container started successfully."
echo "Open this link in the browser to enter AiiDA lab:"
echo "http://localhost:${_arg_port}/?token=${_arg_token}"
# ] <-- needed because of Argbash
